name: CD-eCABS

on:
  push:
    branches:
    - master
    # An alternative approach could 
    # be to trigger this workflow on release tags

env:
  GHCR: ghcr.io/samuelagm/
  CLUSTER_NAME: main
  TF_VAR_cluster_name: main

jobs:
  mvn-build:
    runs-on: ubuntu-latest    
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'microsoft'
          cache: 'maven'
      - run: mvn --batch-mode --update-snapshots verify

      - uses: actions/upload-artifact@v4
        with:
          name: booking-consumer-service
          path: 
            booking-consumer-service/target/*.jar

      - uses: actions/upload-artifact@v4
        with:
          name: booking-producer-service
          path: 
            booking-producer-service/target/*.jar           

  docker-build:
    needs: mvn-build
    runs-on: ubuntu-latest
    strategy:
        matrix:
          project: [booking-consumer-service, booking-producer-service]
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - uses: actions/checkout@v4
      
      - uses: actions/download-artifact@v4
        with:
          path: .
          pattern: ${{ matrix.project }}

      - name: Re-arrange downloaded files
        run: |
          cd ${{ matrix.project }}
          mkdir target
          mv *.jar target

      - name: Build and push
        uses: docker/build-push-action@v3
        
        with:
            context: ./${{ matrix.project }}
            push: true
            tags: |
              ${{ env.GHCR }}${{ matrix.project }}:latest
              ${{ env.GHCR }}${{ matrix.project }}:${{ github.sha }}
  
  infra-setup:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./deployment/terraform/infra
    env:
      TF_VAR_do_token: ${{ secrets.DO_TOKEN }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - uses: hashicorp/setup-terraform@v3

      - name: Terraform fmt
        run: terraform fmt -check
        continue-on-error: true
    
      - name: Terraform Init
        run: terraform init -backend-config "access_key=${{ secrets.DO_KEY_ID }}" -backend-config "secret_key=${{ secrets.DO_KEY_SECRET }}"
    
      - name: Terraform Validate
        run: terraform validate -no-color
    
      - name: Terraform Apply
        run: terraform apply -auto-approve
      
  services-setup:
    needs: infra-setup
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./deployment/terraform/services
    env:
      TF_VAR_do_token: ${{ secrets.DO_TOKEN }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - uses: hashicorp/setup-terraform@v3

      - name: Terraform fmt
        run: terraform fmt -check
        continue-on-error: true

      - name: Terraform Init
        run: terraform init -backend-config "access_key=${{ secrets.DO_KEY_ID }}" -backend-config "secret_key=${{ secrets.DO_KEY_SECRET }}"
    
      - name: Terraform Validate
        run: terraform validate -no-color
    
      - name: Terraform Apply
        run: terraform apply -auto-approve

  deployment:
    needs: [services-setup, docker-build]
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./k8s
    strategy:
      matrix:
        project: [booking-consumer, booking-producer]
    steps:
      - uses: actions/checkout@main

      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DO_TOKEN }}
      - name: Update deployment file
        run: sed -i 's|{{IMAGE}}|'"${{ env.GHCR }}${{ matrix.project }}-service:${{ github.sha }}"'|' ${{ matrix.project }}.yaml

      - name: Save DigitalOcean kubeconfig with short-lived credentials
        run: doctl kubernetes cluster kubeconfig save --expiry-seconds 600 ${{ env.CLUSTER_NAME }}

      - name: Deploy to DigitalOcean Kubernetes
        run: kubectl apply -f ${{ matrix.project }}.yaml

      - name: Verify deployment
        run: kubectl rollout status deployment/${{ matrix.project }}
        