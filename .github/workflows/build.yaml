name: CD-eCABS

on:
  push:
    branches:
    - master

    # An alternative approach could 
    # be to trigger this workflow on release tags

jobs:
  mvn-build:
    runs-on: ubuntu-latest    
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'microsoft'
          cache: 'maven'
      - run: mvn --batch-mode --update-snapshots verify

      - uses: actions/upload-artifact@v4
        with:
          name: booking-consumer-service
          path: 
            booking-consumer-service/target/*.jar

      - uses: actions/upload-artifact@v4
        with:
          name: booking-producer-service
          path: 
            booking-producer-service/target/*.jar           

  docker-build:
    needs: mvn-build
    runs-on: ubuntu-latest
    env:
      GHCR: ghcr.io/samuelagm/
    strategy:
        matrix:
          project: [booking-consumer-service, booking-producer-service]
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - uses: actions/checkout@v4
      
      - uses: actions/download-artifact@v4
        with:
          path: .
          pattern: ${{ matrix.project }}

      - name: Re-arrange downloaded files
        run: |
          cd ${{ matrix.project }}
          mkdir target
          mv *.jar target

      - name: Build and push
        uses: docker/build-push-action@v3
        
        with:
            context: ./${{ matrix.project }}
            push: true
            tags: |
              ${{ env.GHCR }}${{ matrix.project }}:latest
              ${{ env.GHCR }}${{ matrix.project }}:${{ github.sha }}
  
  infra-setup:
    needs: mvn-build
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./deployment/terraform/infra
    env:
      TF_VAR_DO_TOKEN: ${{ secrets.DO_TOKEN }}

    steps:
      # This is only required because the terraform supports only s3 compatible backends, 
      # digital ocean's Spaces is compatible and can use AWS credentials to transport it's auth
      - name: Configure AWS credentials for DO Auth
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.DO_KEY_ID }}
          aws-secret-access-key: ${{ secrets.DO_KEY_SECRET }}
          aws-region: eu-west-1

      - name: Checkout repository
        uses: actions/checkout@v2
      - uses: hashicorp/setup-terraform@v3

      - name: Terraform fmt
        run: terraform fmt -check
        continue-on-error: true
    
      - name: Terraform Init
        run: terraform init
    
      - name: Terraform Validate
        run: terraform validate -no-color
    
      - name: Terraform Apply
        run: terraform apply -auto-approve
    